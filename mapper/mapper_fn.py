# -*- coding: utf-8 -*-
"""mapper_fn.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19CmCURatj03Mov8_BG9F8yXxRKTy5xcO
"""

def generate_sequence(start_number):
    sequence = []
    for i in range(6):  # Repeat for 6 rows
        # Add numbers 1 to 5 to the start number for each row
        sequence.extend([start_number + j for j in range(6)])
        # Move to the start of the next row, which is 24 places ahead
        start_number += 24
    return sequence

def create_mapping(base1 = False):
    # Given sequence
    if base1:
      sequence = [1, 7, 13, 19, 145, 151, 157, 163, 289, 295, 301, 307, 433, 439, 445, 451]
    else:
      sequence = [0, 6, 12, 18, 144, 150, 156, 162, 288, 294, 300, 306, 432, 438, 444, 450]

    # Create a mapping from 1-16 to the numbers in the sequence
    mapping = {i+1: sequence[i] for i in range(len(sequence))}

    return mapping

def find_key_by_index(index, dictionary):
    for key, value in dictionary.items():
        if index in value:
            return key
    return None

def find_key_of_value_in_list(value, dictionary):
    for key, values in dictionary.items():
        if value in values:
            return key
    return None

from collections import Counter

def most_frequent_number(lst):
    if not lst:  # Check if the list is empty
        return None
    counter = Counter(lst)
    most_common = counter.most_common(1)[0][0]  # Retrieves the most common element
    return most_common